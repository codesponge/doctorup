#!/usr/bin/env ruby
begin
  require 'doctorup'
rescue LoadError
  #FIXME this load hack is *Only for Development!* (so I don't have to build gem to test cli)
  $: << "/Volumes/AlRaid/Server/Homes/billy/lib/ruby/gems/doctorup/lib"
  require 'doctorup'
end
doctor = DoctorUp.new


if %w(--version -v).include? ARGV.first
  puts "doctorup 0.1.1"
  exit(0)
end




css_style = ''
CSS_DIR = File.expand_path("~/lib/css/coderay/") # => for coderay testing only
@include_style = false
#FIXME hard coded directory for development only!
doctor.options[:ultraviolet_css_dir] = "/Volumes/AlRaid/Server/Homes/billy/lib/css/ultraviolet"



#TODO Cleanup option parsing
opts = OptionParser.new do |opts|
  


  opts.banner = "Usage doctorup [options] [textile_file]"
  opts.separator "If no file specified, STDIN will be used. If you are typing input, you can send an EOF by pressing ^D (^Z on Windows)"
  opts.separator ""

  opts.on("-s","--style FILE","Include FILE wrapped in 'style' tags at begining of output") do |s|
    if(File.readable?(s)) then
      css_style << wrap_style(File.read(s))
    else
      raise ArgumentError, "The file #{s} doesn't exist or is unreadable"
    end
  end

  opts.on("--include_style","Places a style section containing style for theme(s) at the beginging of output") do
    @include_style = true
  end

  opts.on("--css_theme_dir DIR", "look for theme sytlesheets in DIR. default:  #{@ultraviolet_css_dir}") do |d|
    if(File.directory?(d) && Dir.glob(File.join(d,"*.css")).entries.size > 0) then
      @ultraviolet_css_dir = d
    else
      raise ArgumentError, "the Directory #{d} either can not be found or has no *.css files"
    end
  end
  
  opts.on("-t,","--theme NAME","Use ultraviolet theme THEME.") do |theme|
    doctor.options[:render_style] = theme if Snippet.theme_available?(theme)
  end
  
  opts.on("-n","--name NAME","Use a stylesheet from #{CSS_DIR}\n\t note: you don't need to add the .css") do |n|
    raise ArgumentError,"Can't read from #{CSS_DIR} maybe it doesn't exist?"  unless (File.directory?(CSS_DIR) && File.readable?(CSS_DIR))
    d = Dir.new(CSS_DIR)
    available = Dir.glob("#{d.path}/*.css").map{|e| File.basename(e).gsub(/.css/){''} }
    if(available.include?(n)) then
      fss = File.join(d.path,"#{n}.css")
      css_style << wrap_style( File.read(fss) )
    else
      puts "Didn't find a css file in #{CSS_DIR} with name #{n}"
      puts "Try one of these\n\t#{available.join(', ')}" if available.size > 0
    end
  end

  opts.on("-p","--parser NAME","Use parser NAME. can be either 'coderay' or 'ultraviolet'\n defaults to #{@parser}") do |parser|
    raise ArgumentError, "-p, --p Must be either 'coderay' or 'ultraviolet' " unless [:coderay,:ultraviolet].include? parser.to_sym
    @parser = parser.to_sym
  end
end #optparse

opts.parse! ARGV
if(@include_style) then
  css_style = doctor.wrap_style_from_file(File.join(doctor.options[:ultraviolet_css_dir],"#{doctor.options[:render_style]}.css"))
end



input = ARGF.read
#puts doctor.rx(input,doctor.options)

page = doctor.process(input,doctor.options)

doctemp = <<-HTML
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
	<title>Doctored</title>


#{page[:head]}

<style type="text/css" media="screen">
  #{DoctorUp.ultra_violet_info_bar_style}
</style>

</head>

<body>
  #{page[:body];}
</body>
</html>
HTML

print doctemp