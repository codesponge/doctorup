#!/usr/bin/env ruby
begin
  require 'doctorup'
rescue LoadError
  require 'rubygems'
  require 'doctorup'
end

doctor = DoctorUp.new


if %w(--version -v).include? ARGV.first
  puts "doctorup 0.1.1"
  exit(0)
end


opts = OptionParser.new do |opts|

  opts.banner = <<-BANNER

Usage doctorup [options] [textile_file]

If no file specified, STDIN will be used. If you are typing input, you can send an EOF by pressing ^D (^Z on Windows)

To use: pass in a textile file.  If you want to include syntax highlighted snippets of code wrap them in
  <code lang='lang_name'></code>
tags where lang_name is the name of an available programing language.

To see all the languages available do
  doctorup --languages"

NOTE: This executible is provied mainly as an example, for more control copy
#{__FILE__}
to somewhere in your PATH and (after changing the name) edit so the output suits your needs.

OPTIONS
-------
BANNER
  opts.on("-t,","--theme NAME","Use ultraviolet theme THEME.  default: #{DoctorUp.options[:theme]}") do |theme|
    doctor.options[:theme] = theme if Snippet.theme_available?(theme)
  end
  opts.on("--themes","List Available themes and exit") do
    puts Snippet.syntax_themes
    exit(0)
  end
  opts.on("--languages","List Available languages and exit") do
    puts Snippet.syntax_languages
    exit(0)
  end

  opts.on("--[no-]info_bar","Use an info bar in output? default: #{DoctorUp.options[:info_bar].to_s}") do |ib|
    doctor.options[:info_bar] = ib
  end

  opts.on("--yaml_options", "Output options as yaml and exit") do
    puts DoctorUp.options.to_yaml
    exit(0)
  end

end #optparse


opts.parse! ARGV

input = ARGF.read
page = doctor.process(input)

# page is a hash containing the following
# :raw
#    The input unchanged
# :syntaxed
#   The input with syntax highlighting (no markup filter applied)
#   Great if input is already html.
#   If your prefered markup isn't yet available in DoctorUp then
#   pass this through your filter.
# :body
#   The input with syntax highlighting and markup filter applied (textile?)
# :head
#   links tags pointing to theme stylesheets (uses options[:themes_css_url] )
# :theme_style
#   style for themes wrapped in style tags (pulls style sheets from options[:themes_css_dir])
# :themes_used
#   An array containing the names of the themes used. You could use :head or :theme_style for
#   development and in production use this array to point to an external source like S3.
#   This can also be used to check that only the theme(s) you like made it into your layout.


####################################
# Create new scripts with everything above this line for basic command line argument
# support. Change below here so output suits your needs.
####################################

doctemp = <<-HTML
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
	<title>Doctored</title>
#{page[:head]}
<!-- extra style sheets? -->
</head>
<body>
  #{doctor.options[:theme]}
  <div id="main_content">
  #{page[:body];}
  </div>
</body>
</html>
HTML

print doctemp