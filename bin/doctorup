#!/usr/bin/env ruby
begin
  require 'doctorup'
rescue LoadError
  #FIXME this load hack is *Only for Development!* (so I don't have to build gem to test cli)
  $: << "/Volumes/AlRaid/Server/Homes/billy/lib/ruby/gems/doctorup/lib"
  require 'doctorup'
end
include DoctorUp


silence_warnings do

end

if %w(--version -v).include? ARGV.first
  puts "doctorup 0.1.1"
  exit(0)
end



css_style = ''
CSS_DIR = File.expand_path("~/lib/css/coderay/") # => for coderay testing only
@include_style = false
@ultraviolet_css_dir = File.join(Dir.pwd,"css")

opts = OptionParser.new do |opts|
  init_ultraviolet_options unless @ultraviolet_options
  
  
  opts.banner = "Usage doctorup [options] [textile_file]"
  opts.separator "If no file specified, STDIN will be used. If you are typing input, you can send an EOF by pressing ^D (^Z on Windows)"
  opts.separator ""
  
  opts.on("-s","--style FILE","Include FILE wrapped in 'style' tags at begining of output") do |s|
    if(File.readable?(s)) then
      css_style << wrap_style(File.read(s))
    else
      raise ArgumentError, "The file #{s} doesn't exist or is unreadable"
    end
  end
  
  opts.on("--include_style","ultraviolet specific.  Places a style section at the beginging of the page. Mainly used for testing and composing (in WebPreview)") do
    @include_style = true
  end
  
  opts.on("--css_dir DIR", "Directory where ultraviolet should look for stylesheets.\n\t defaults to #{@ultraviolet_css_dir}\n\tRelevent only whith --include_style") do |d|
    if(File.directory?(d) && Dir.glob(File.join(d,"*.css")).entries.size > 0) then
      @ultraviolet_css_dir = d
    else
      raise ArgumentError, "the Directory #{d} either can not be found or has no *.css files"
    end
  end
  opts.on("-t,","--theme NAME","Use ultraviolet theme THEME.  available choices are #{Uv.themes.join(', ')}") do |theme|
    @ultraviolet_options[:render_style] = theme if Uv.themes.include?(theme)
  end
  opts.on("-n","--name NAME","Use a stylesheet from #{CSS_DIR}\n\t note: you don't need to add the .css") do |n|
    raise ArgumentError,"Can't read from #{CSS_DIR} maybe it doesn't exist?"  unless (File.directory?(CSS_DIR) && File.readable?(CSS_DIR))
    d = Dir.new(CSS_DIR)
    available = Dir.glob("#{d.path}/*.css").map{|e| File.basename(e).gsub(/.css/){''} }
    if(available.include?(n)) then
      fss = File.join(d.path,"#{n}.css")
      css_style << wrap_style( File.read(fss) )
    else
      puts "Didn't find a css file in #{CSS_DIR} with name #{n}"
      puts "Try one of these\n\t#{available.join(', ')}" if available.size > 0
    end
  end
  
  opts.on("-p","--parser NAME","Use parser NAME. can be either 'coderay' or 'ultraviolet'\n defaults to #{@parser}") do |parser|
    raise ArgumentError, "-p, --p Must be either 'coderay' or 'ultraviolet' " unless [:coderay,:ultraviolet].include? parser.to_sym
    @parser = parser.to_sym
  end
end #optparse

opts.parse! ARGV
if(@parser == :ultraviolet && @include_style) then
  css_style = wrap_style_from_file(File.join(@ultraviolet_css_dir,"#{@ultraviolet_options[:render_style]}.css"))
end



input = ARGF.read
first_pass,second_pass, third_pass = '','',''

first_pass = syntax_up(input)
#filter through redcloth
second_pass = textilize(first_pass)

puts css_style if css_style.size > 0
#puts first_pass
puts second_pass

__END__
